// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/AntonioKichaev/internal/entity"
	mock "github.com/stretchr/testify/mock"

	service "github.com/AntonioKichaev/internal/service"
)

// OrderAdapter is an autogenerated mock type for the OrderAdapter type
type OrderAdapter struct {
	mock.Mock
}

// GetOrderByNumber provides a mock function with given fields: ctx, dto
func (_m *OrderAdapter) GetOrderByNumber(ctx context.Context, dto service.GetOrderByNumberDTO) (*entity.Order, error) {
	ret := _m.Called(ctx, dto)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.GetOrderByNumberDTO) (*entity.Order, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.GetOrderByNumberDTO) *entity.Order); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.GetOrderByNumberDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByUser provides a mock function with given fields: ctx, dto
func (_m *OrderAdapter) GetOrdersByUser(ctx context.Context, dto *service.GetOrdersByUserIDDTO) ([]entity.Order, error) {
	ret := _m.Called(ctx, dto)

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.GetOrdersByUserIDDTO) ([]entity.Order, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.GetOrdersByUserIDDTO) []entity.Order); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.GetOrdersByUserIDDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadOrderID provides a mock function with given fields: ctx, dto
func (_m *OrderAdapter) UploadOrderID(ctx context.Context, dto *service.UploadOrderIDDTO) (*entity.Order, error) {
	ret := _m.Called(ctx, dto)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.UploadOrderIDDTO) (*entity.Order, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.UploadOrderIDDTO) *entity.Order); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.UploadOrderIDDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderAdapter creates a new instance of OrderAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderAdapter {
	mock := &OrderAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
