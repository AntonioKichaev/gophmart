// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/AntonioKichaev/internal/entity"
	mock "github.com/stretchr/testify/mock"

	service "github.com/AntonioKichaev/internal/service"
)

// WithdrawnAdapter is an autogenerated mock type for the WithdrawnAdapter type
type WithdrawnAdapter struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, dto
func (_m *WithdrawnAdapter) Create(ctx context.Context, dto service.WithdrawnCreateDTO) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.WithdrawnCreateDTO) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWithdraws provides a mock function with given fields: ctx, userID
func (_m *WithdrawnAdapter) GetWithdraws(ctx context.Context, userID uint) ([]entity.Withdrawn, error) {
	ret := _m.Called(ctx, userID)

	var r0 []entity.Withdrawn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]entity.Withdrawn, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []entity.Withdrawn); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Withdrawn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWithdrawnAdapter creates a new instance of WithdrawnAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawnAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawnAdapter {
	mock := &WithdrawnAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
